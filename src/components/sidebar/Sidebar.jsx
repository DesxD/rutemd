/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
 * –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞—É–¥–∏–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–∫—Ä—ã—Ç–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
 */

import { useState } from 'react';
import PropTypes from 'prop-types';
import { useTranslation } from 'react-i18next';
import { useMarkersContext } from '../../contexts/MarkersContext';
import { useAudioContext } from '../../contexts/AudioContext';
import CitySelector from '../selectors/CitySelector';
import RouteSelector from '../selectors/RouteSelector';
import MarkerManager from '../markers/MarkerManager';
import SequenceManager from '../sequences/SequenceManager';
import MarkersImportExport from '../markers/MarkersImportExport';
import '../../styles/sidebar/Sidebar.css';

function Sidebar({ 
  currentCity, 
  onCityChange, 
  routes, 
  selectedRoute, 
  onRouteSelect,
  isOpen,
  onToggleShowAllRoutes,
  showAllRoutes,
  onToggleMarkerPlacement,
  showMarkers,
  onToggleShowMarkers
}) {
  const { t } = useTranslation();
  const { applySequenceFromFile } = useMarkersContext();
  const { isAudioEnabled, toggleAudio } = useAudioContext();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
  const [showMarkerManager, setShowMarkerManager] = useState(false);
  const [showSequenceManager, setShowSequenceManager] = useState(false);
  const [showImportExport, setShowImportExport] = useState(false);

  // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
  const handleToggleMarkerPlacement = () => {
    if (typeof onToggleMarkerPlacement === 'function') {
      onToggleMarkerPlacement(true); // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    } else {
      console.error('onToggleMarkerPlacement –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const handleQuickLoad = async () => {
    if (currentCity && selectedRoute) {
      const result = await applySequenceFromFile(currentCity, selectedRoute.number);
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
      if (result) {
        alert(t('sequences.quickLoadSuccess'));
      } else {
        alert(t('sequences.quickLoadNotFound'));
      }
    }
  };

  return (
    <div className={`sidebar ${isOpen ? 'open' : ''}`}>      
      <div className="sidebar-content">
        <h2 className="sidebar-title">{t('apph1')}</h2>
        
        <div className="sidebar-section">
          <h3>{t('selectCity')}</h3>
          <CitySelector 
            currentCity={currentCity} 
            onCityChange={onCityChange} 
          />
        </div>
        
        <div className="sidebar-section">
          <h3>{t('selectRoute')}</h3>
          <RouteSelector 
            routes={routes} 
            selectedRoute={selectedRoute} 
            onRouteSelect={onRouteSelect} 
          />
        </div>

        <div className="sidebar-section">
          <label className="toggle-container">
            <input 
              type="checkbox" 
              checked={showAllRoutes} 
              onChange={onToggleShowAllRoutes}
            />
            <span className="toggle-label">{t('showAllRoutes')}</span>
          </label>
        </div>
        
        {/* –°–µ–∫—Ü–∏—è –∞—É–¥–∏–æ-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <div className="sidebar-section audio-section">
          <h3>{t('audio.title')}</h3>
          <label className="toggle-container">
            <input 
              type="checkbox" 
              checked={isAudioEnabled} 
              onChange={toggleAudio}
            />
            <span className="toggle-label">
              {isAudioEnabled ? (
                <><span className="audio-icon">üîä</span> {t('audio.enabled')}</>
              ) : (
                <><span className="audio-icon">üîá</span> {t('audio.disabled')}</>
              )}
            </span>
          </label>
        </div>
        
        {/* –†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞–º–∏ */}
        <div className="sidebar-section markers-section">
          <h3>{t('markers.title')}</h3>
          
          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ */}
          <label className="toggle-container">
            <input 
              type="checkbox" 
              checked={showMarkers} 
              onChange={onToggleShowMarkers}
            />
            <span className="toggle-label">
              {showMarkers ? t('markers.show') : t('markers.hide')}
            </span>
          </label>
          
          <div className="marker-buttons">
            <button 
              className="btn-marker" 
              onClick={handleToggleMarkerPlacement}
              title={t('markers.placeMarker')}
            >
              <span className="icon">üìç</span>
              {t('markers.placeMarker')}
            </button>
            
            <button 
              className="btn-marker" 
              onClick={() => setShowMarkerManager(true)}
              title={t('markers.manageMarkers')}
            >
              <span className="icon">üîß</span>
              {t('markers.manageMarkers')}
            </button>
            
            <button 
              className="btn-marker" 
              onClick={() => setShowImportExport(true)}
              title={t('markers.importExport')}
            >
              <span className="icon">üíæ</span>
              {t('markers.importExport')}
            </button>
          </div>
        </div>
        
        {/* –†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ */}
        <div className="sidebar-section sequences-section">
          <h3>{t('sequences.title')}</h3>
          <div className="sequence-buttons">
            <button 
              className="btn-sequence" 
              onClick={() => setShowSequenceManager(true)}
              title={t('sequences.manageSequences')}
            >
              <span className="icon">üîÑ</span>
              {t('sequences.manageSequences')}
            </button>
            
            {/* –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ */}
            {selectedRoute && (
              <button 
                className="btn-sequence btn-quick-load" 
                onClick={handleQuickLoad}
                title={t('sequences.quickLoad')}
              >
                <span className="icon">‚ö°</span>
                {t('sequences.quickLoad')}
              </button>
            )}
          </div>
        </div>
      </div>
      
      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ */}
      {showMarkerManager && (
        <MarkerManager 
          isOpen={showMarkerManager}
          onClose={() => setShowMarkerManager(false)}
          routes={routes}
          selectedRoute={selectedRoute}
        />
      )}
      
      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ */}
      {showSequenceManager && (
        <SequenceManager
          isOpen={showSequenceManager}
          onClose={() => setShowSequenceManager(false)}
          currentCity={currentCity}
          selectedRoute={selectedRoute}
          routes={routes}
        />
      )}
      
      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ */}
      {showImportExport && (
        <MarkersImportExport 
          isOpen={showImportExport}
          onClose={() => setShowImportExport(false)}
          currentCity={currentCity}
        />
      )}
    </div>
  );
}

Sidebar.propTypes = {
  currentCity: PropTypes.string.isRequired,
  onCityChange: PropTypes.func.isRequired,
  routes: PropTypes.array.isRequired,
  selectedRoute: PropTypes.object,
  onRouteSelect: PropTypes.func.isRequired,
  isOpen: PropTypes.bool.isRequired,
  onToggleShowAllRoutes: PropTypes.func.isRequired,
  showAllRoutes: PropTypes.bool.isRequired,
  onToggleMarkerPlacement: PropTypes.func,
  showMarkers: PropTypes.bool.isRequired,
  onToggleShowMarkers: PropTypes.func.isRequired
};

export default Sidebar;